# POGC2 IMPLEMENTATION <builtin/pogio.pog>
# This file can be used to call C functions like printf, but with
# a PogScript-like style. This means you can pass formats
# like '{}' instead of '%i' to printf and the type of the
# argument will be inferred using the constants from <builtin/types.pog>.
# This file also defines some new functions like print and println,
# which take any object and attempt to write it to stdout.

# THIS FILE SHOULD CONTAIN THE FOLLOWING FUNCTIONS:
# PogScript.IO.fprintf(IO_FILE stream, char ptr, *args)
# PogScript.IO.printf(char ptr, *args)
# PogScript.IO.print(any var)
# PogScript.IO.println(any var)

extern cstruct IO_FILE
extern IO_FILE ptr stdout
extern cdecl int func fputc(char var arg, IO_FILE ptr stream)
extern cdecl int func sprintf(char ptr str, char ptr format, *args)

namespace PogScript.IO
{
	void func fputs(char ptr str, IOFILE ptr stream)
	{
		int var i

		for i=0, str[i] != '\0', i+=1
		{
			fputc(str[i], stream)
		}
	}

	void func puts(char ptr str)
	{
		fputs(str, stdout)
	}

	void func fprintf(IO_FILE ptr stream, char ptr fmt, *args)
	{
		fputs(PogScript.String.format(fmt, args), stream)
	}

	void func printf(char ptr fmt, *args)
	{
		fprintf(stdout, fmt, *args)
	}

	void func print(any var object)
	{
		PogScript.IO.printf("{}", object)
	}
	
	void func println(any var object)
	{
		PogScript.IO.printf("{}", object)
		fputc('\n', stdout)
	}
}