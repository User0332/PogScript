# POGC2 IMPLEMENTATION <builtin/string.pog>
# This file contains builtin functions for working with strings.
# Ths file contains functions similar to the functions defined
# in <string.h>, but with a PogScript-like style. This file
# uses functions like sprintf but using the `any` type.
# This allows programmers to format arguments into a string without
# worrying about the type or format specifier that they need to 
# pass in to the string formatting function. It also provides
# methods like changeto() to change a string, concat() to concatenate
# to a string (reallocation is done by the function), and concatc() to
# concatenate a single char to the string.

# THIS FILE SHOULD CONTAIN THE FOLLOWING FUNCTIONS:
# PogScript.String.format(char ptr, *args)
# PogScript.String.concat(char ptr, char ptr)
# PogScript.String.concatc(char ptr, char var)
# PogScript.String.changeto(char ptr, char ptr)

extern cdecl void ptr func malloc(int var size)
extern cdecl int func strlen(char ptr str)
extern cdecl void func free(void ptr pointer)
extern cdecl void func realloc(void ptr pointer, int var size)
extern cdecl char ptr func strncpy(char ptr dest, char ptr src, int var size)
extern cdecl char ptr func strncat(char ptr dest, char ptr src, int var size)

namespace PogScript.String
{
	char const FMT_OPEN = '\123' # open brace
	char const FMT_CLOSE = '\125' #close brace

	void func changeto(char ptr str, char ptr newstr)
	{
		int var size = strlen(newstr)
		free(str)
		str = malloc(size)
		strncpy(str, newstr, size)
	}

	void func concat(char ptr str, char ptr addstr)
	{
		int var size = strlen(newstr)
		str = realloc(size)
		strncat(str, addstr, size)
	}

	void func concatc(char ptr str, char var c)
	{
		str = realloc(size)
		strncat(str, &c, 1)
	}

	char ptr format(char ptr fmt, *args)
	{
		int var i
		int var waiting_for_fmt
		int var argidx
		any var arg
		char var c
		char ptr numres = malloc(10)
		char ptr res = malloc(1)

		for (i=0, fmt[i] != '\0', i+=1)
		{
			c = fmt[i]
			if c == PogScript.String.FMT_OPEN
			{
				if waiting_for_fmt
					waiting_for_fmt = 0
					PogScript.String.concat(PogScript.String.FMT_OPEN)
				else
					waiting_for_fmt = 1
			}
			elif waiting_for_fmt and (c == PogScript.String.FMT_CLOSE)
			{
				arg = args[argidx]
				type = PogScript.gettype(arg)

				if type is PogScript.Int32 or type is PogScript.Int16
				{
					sprintf(numres, "%d", arg)

					PogScript.String.concat(res, numres)
				}
				elif type is PogScript.Float326
				{
					sprintf(numres, "%f", arg)
					
					PogScript.String.concat(res, numres)
				}
				elif type is PogScript.Char
				{
					PogScript.String.concat(res, &arg)
				}
				elif type is PogScript.CharPointer
				{
					PogScript.String.concat(res, arg)
				}
				elif (type is PogScript.Int16Pointer) or (type is PogScript.Int32Pointer) or (type is PogScript.UInt16Pointer) or (type is PogScript.UInt32Pointer) or (type is PogScript.Float32Pointer) or (type is PogScript.Address32)
				{
					sprintf(numres, "%p", arg)
					
					PogScript.String.concat(res, numres)
				}

				waiting_for_fmt = 0
				argidx+=1
			} 
			elif waiting_for_fmt #if no close brace encountered, return empty string
			{
				return &('\0')
			}
			else
			{
				PogScript.String.concat(res, &c)
			}
			
			return res
		}
	}
}