# POGC2 IMPLEMENTATION <pogio.pog>
# This file can be used to call C functions like printf, but with
# a PogScript-like style. This means you can pass formats
# like '{}' instead of '%i' to printf and the type of the
# argument will be inferred using the constants from <builtin/types.pog>.
# This file also defines some new functions like print and println,
# which take any object and attempt to write it to stdout.

# THIS FILE SHOULD CONTAIN THE FOLLOWING FUNCTIONS:
# PogIO.printf
# PogIO.print
# PogIO.println

extern cdecl int func putc(char var arg)
extern cdecl int func sprintf(char ptr str, char ptr format, *args)

namespace PogIO
{
    void func printf(char ptr fmt, *args) # NOTE: update to include more types
    {
        int var i
        int var j
        char var c
        any var arg
        any ptr type
        char ptr numres = malloc(10)
        int var waiting_for_fmt = 0
        int var argidx = 0
        

        for i=0, fmt[i] != '\0', i+=1
        {
            c = fmt[i]
            if c == '{'
            {
                if waiting_for_fmt
                    waiting_for_fmt = 0
                else
                    waiting_for_fmt = 1
            }

            elif waiting_for_fmt and (c == '}')
            {
                arg = args[argidx]
                type = PogScript.gettype(arg)

                if type is PogScript.Int32 or type is PogScript.Int16
                {
                    sprintf(numres, "%d", arg)

                    for j=0, numres[j] != '\0', j+=1
                    {
                        putc(numres[j])
                    }
                }
                else if type is PogScript.Float32
                {
                    sprintf(numres, "%f", arg)
                    
                    for j=0, numres[j] != '\0', j+=1
                    {
                        putc(numres[j])
                    }
                }
                else if type is PogScript.Char
                {
                    putc(c)
                }
                else if type is PogScript.CharPointer
                {
                    for j=0, arg[j] != '\0', j+=1
                    {
                        putc(arg[j])
                    }
                }
                else if (type is PogScript.Int16Pointer) or (type is PogScript.Int32Pointer) or (type is PogScript.UInt16Pointer) or (type is PogScript.UInt32Pointer) or (type is PogScript.Float32Pointer)
                {
                    notypecheck
                    {
                        sprintf(numres, "%p", arg)
                        
                        for j=0, numres[j] != '\0', j+=1
                        {
                            putc(numres[j])
                        }
                    }
                }
            } 

            elif waiting_for_fmt #if no '}' encountered, return -1
            {
                return -1
            }
            else
            {
                putc(c)
            }
        }
    }
}